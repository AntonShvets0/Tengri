using System.Collections.Generic;
using TengriLang.Language.Model;
using TengriLang.Language.Model.AST;
using TengriLang.Language.Model.Lexeme;
using TengriLang.Reader;

namespace TengriLang.Language
{
    public class Translator
    {
        private TreeReader _reader;
        private string _file;
        private bool _inClass;
        public bool InBlock = true;
        public bool IsStaticBlock = false;
        public string ClassName;

        private string _code = "";

        public static List<string> NeedNamespaces = new List<string>
        {
            "TengriLang.Language.System",
            "TengriLang.Language.System.Library",
            "System.Collections.Generic",
            "System"
        };

        public Translator(string file, List<TreeElement> ast)
        {
            _reader = new TreeReader(ast);
            _file = file;
        }

        public string GetCode()
        {
            var ns = 
                _file.Replace('\\', '_').Replace('/', '_').Replace(".tengri", "");

            _code += "namespace FILE_TENGRI_" + ns + " {";

            if (_inClass) _code = "";

            while (!_reader.IsEmpty())
            {
                var part = GetPart(_reader.Read());
                if (part == null) break;

                _code += part;
            }

            if (!_inClass)
            {
                _code += "}";
                var code = _code;
                _code = "\t/* GENERATED BY TENGRI TRANSLATOR */\n// =============================================== //\n\n\n";

                foreach (var needNamespace in NeedNamespaces)
                {
                    _code += $"using {needNamespace};\n";
                }

                _code += $"\n{code}";
            }
            
            return _code;
        }

        public string GetPart(TreeElement element)
        {
            _reader.Next();

            if (element is IElement treeElement)
            {
                var response = treeElement.ParseCode(this, _reader);
                if (response == null) return GetPart(_reader.Read());

                return response;
            }

            return "";
        }

        public string TypeToString(FuncType type) => type.ToString().ToLower();

        public string Emulate(List<TreeElement> treeElements, bool inBlock = true, bool isStaticBlock = false, string className = null)
        {
            var translator = new Translator(_file, treeElements);
            translator._inClass = true;
            translator.ClassName = className ?? ClassName;
            translator.InBlock = inBlock;
            translator.IsStaticBlock = isStaticBlock;

            return translator.GetCode();
        }
    }
}